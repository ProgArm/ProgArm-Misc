#!/bin/bash
FILE_CPP='input_codes.hpp'
FILE_PYTHON='input_codes.py'
FILE_PERL='input_codes.pl'
FILE_WIKI='progarm-keys.pl'

NO_EDIT_NOTICE='Do not edit this file! It is generated automatically.'

echo "// $NO_EDIT_NOTICE" > "$FILE_CPP"
echo "# $NO_EDIT_NOTICE" > "$FILE_PYTHON"
echo "# $NO_EDIT_NOTICE" > "$FILE_PERL"
echo '# These hashes are used in a wiki module' > "$FILE_WIKI"

declare -A combinations=(['SX']=0 ['LX']=1 ['XS']=2 ['XL']=3 ['SS']=4 ['LL']=5)

perlHash=''
wikiHash=''

while IFS='| ' read -r _ first second name; do
    action=0
    if [[ $first && $second && $name ]]; then
	firstInt=${combinations["${first^^}"]}
	secondInt=${combinations["${second^^}"]}
	((action = firstInt * 6 + secondInt)) # *6 is a base 6 left shift

	echo "static const int INPUT_${name} = $action;" >> "$FILE_CPP"
	echo "INPUT_${name} = $action" >> "$FILE_PYTHON" # TODO this stuff makes sense in C, but we should use dict in other languages
	perlHash+="$name $action "
	wikiHash+="'${first^^} ${second^^}' => '${name,,}',"

	if (( ${#name} == 1 )); then # not special key
	    # add Shift+keys
	    ((action += 100))
	    echo "static const int INPUT_${name^^} = $action;" >> "$FILE_CPP"
	    echo "INPUT_${name^^} = $action" >> "$FILE_PYTHON" # TODO this stuff makes sense in C, but we should use dict in other languages
	    perlHash+="${name^^} $action "
	    wikiHash+="'${first^^} ${second^^}' => '${name^^}',"
	fi
    fi
done < bimorseCodes.org

echo 'package ProgArm;' >> "$FILE_PERL"
echo "our %CODES = qw($perlHash);" >> "$FILE_PERL"
echo "our %KEYS = reverse %CODES;" >> "$FILE_PERL"

echo "my %KEYS = ($wikiHash);" >> "$FILE_WIKI"
echo "my %COMBINATIONS = reverse %KEYS;" >> "$FILE_WIKI"
